<html>

<head>
    <link href="css/main.css" rel="stylesheet" type="text/css">
</head>

<body>
    <div id="container">
        <p id="controlinfo">No connection to Host</p>
        <div id="controls">
            <div id="joystickL" class="stickzone"></div>
            <div id="joystickR" class="stickzone"></div>
        </div>
        <p id="instructions">Nutze die Joysticks oder die Tasten W-S und O-L, um die Ketten zu steuern!</p>
    </div>

    <!-- reconnect button -->
    <div id="reconnect" style="display:none;">
        <input id="reconnectButton" type="button" value="Verbindung wiederherstellen">
    </div>

    <script type="text/javascript" src="js/socket.io.min.js"></script>
    <script type="text/javascript" src="js/nipplejs.min.js"></script>
    <script type="text/javascript" src="js/jquery-min.js"></script>
    <script type="text/javascript" src="js/annyang.min.js"></script>
    <script>
        var socket = io();
        var controlling = false;
        var waitingTime = 0;
        var controlMethod = "";
        var afk = false;
        const checkupTime = 1000;
        const stickSize = 360;

        var xy = [0, 0];

        var setXY = function() {
            socket.emit('xy', {
                'xy': xy
            });
        }

        var controlInfo = document.getElementById('controlinfo');


        //add mjpeg stream
        let hostUrl = window.location.hostname;

        let streamImg = document.createElement('div');


        let streamImg = document.createElement('img');
        streamImg.setAttribute('src', 'http://' + hostUrl + ':8080/stream/video.mjpeg');
        streamImg.setAttribute('style', '-webkit-user-select: none');
        
        streamImg.setAttribute('id', 'video');

        document.getElementById('controls').insertBefore(streamImg, document.getElementById('joystickL'));

        //add joystick
        var stickL = nipplejs.create({
            zone: document.getElementById('joystickL'),
            mode: 'static',
            size: stickSize,
            position: {
                left: '10%',
                top: '80%'
            },
            color: 'black',
            restOpacity: '0.7'
        });

        var stickR = nipplejs.create({
            zone: document.getElementById('joystickR'),
            mode: 'static',
            size: stickSize,
            position: {
                left: '90%',
                top: '80%'
            },
            color: 'black',
            restOpacity: '0.7'
        });

        //save stick front divs
        var frontArray = document.getElementsByClassName('front');

        //function which moves the stick to the current position
        var moveStick = function() {
            frontArray[0].style.top = xy[0];
            frontArray[1].style.top = xy[1];
        }

        //function which periodically emits stick positions (prevents motor timeout after one second if position does not change)
        var updateStickPosition = function() {
            if (controlMethod == "stick" && xy != [0, 0]) {
                setXY();
                setTimeout(updateStickPosition, 300);
            }
        }

        //function which kills all movement and resets controlMethod
        var resetMovement = function() {
            frontArray[0].style.top = 0;
            frontArray[1].style.top = 0;
            xy = [0, 0];

            controlMethod = "";
        }


        /* ----- listen for joystick movement --------- */
        //function which toggles usability of sticks
        var toggleSticks = function(useSticks) {
            if (useSticks) {
                stickL.on('move', function(ev, nipple) {
                    //check if client is controlling
                    if (controlling && controlMethod == "" || controlMethod == "stick") {
                        //set control methods flag
                        controlMethod = "stick";

                        //set new position
                        xy[0] = nipple.instance.frontPosition.y;
                        //prevent lateral movement
                        frontArray[0].style.left = 0;

                        updateStickPosition();
                    } else {
                        //prevent all movement
                        frontArray[0].style.left = 0;
                        frontArray[0].style.top = 0;
                    }
                });

                stickR.on('move', function(ev, nipple) {
                    if (controlling && controlMethod == "" || controlMethod == "stick") {
                        //set control methods flag
                        controlMethod = "stick";

                        xy[1] = nipple.instance.frontPosition.y;
                        frontArray[1].style.left = 0;

                        updateStickPosition();
                    } else {
                        frontArray[1].style.left = 0;
                        frontArray[1].style.top = 0;
                    }
                });

                stickL.on('end', function(ev, nipple) {
                    if (controlling && controlMethod == "" || controlMethod == "stick") {
                        xy[0] = 0;

                        setXY();

                        //reset control method flag
                        controlMethod = "";
                    }
                });

                stickR.on('end', function(ev, nipple) {
                    if (controlling && controlMethod == "" || controlMethod == "stick") {
                        xy[1] = 0;

                        setXY();

                        //reset control method flag
                        controlMethod = "";
                    }
                });
            } else {
                stickL.on('move', function(ev, nipple) {
                    //prevent all movement
                    frontArray[0].style.left = 0;
                    frontArray[0].style.top = xy[0];
                });

                stickR.on('move', function(ev, nipple) {
                    //prevent all movement
                    frontArray[1].style.left = 0;
                    frontArray[1].style.top = xy[1];
                });
            }
        }

        toggleSticks(true);

        /* ----------- listen for key input ------------ */

        $('body').keydown(function(e) {
            if (controlling && controlMethod == "" || controlMethod == "key") {
                //prohibit stick movement
                toggleSticks(false);

                //set control methods flag
                controlMethod = "key";

                //process input
                switch (e.key) {
                    case 's':
                        frontArray[0].style.top = stickSize / 2;
                        xy[0] = stickSize / 2;
                        break;

                    case 'w':
                        frontArray[0].style.top = -stickSize / 2;
                        xy[0] = -stickSize / 2;
                        break;

                    case 'l':
                        frontArray[1].style.top = stickSize / 2;
                        xy[1] = stickSize / 2;
                        break;

                    case 'o':
                        frontArray[1].style.top = -stickSize / 2;
                        xy[1] = -stickSize / 2;
                        break;
                }

                //send input
                setXY();
            }
        });

        $('body').keyup(function(e) {
            if (controlling && controlMethod == "" || controlMethod == "key") {
                //process input
                switch (e.key) {
                    case 's':
                        frontArray[0].style.top = 0;
                        xy[0] = 0;
                        break;

                    case 'w':
                        frontArray[0].style.top = 0;
                        xy[0] = 0;
                        break;

                    case 'l':
                        frontArray[1].style.top = 0;
                        xy[1] = 0;
                        break;

                    case 'o':
                        frontArray[1].style.top = 0;
                        xy[1] = 0;
                        break;
                }

                //send input
                setXY();

                //reset control method flag
                controlMethod = "";

                //reallow stick movement
                toggleSticks(true);
            }
        });

        /* --------- voice recognition for movement ------------- */

        /*
        if (annyang) {
            annyang.setLanguage('de-DE');

            // Let's define a command.
            var commands = {
                'fahre *direction': function(direction) {
                  //pause voice recognition
                  annyang.pause();
                    console.log(direction);
                    if (controlling && controlMethod == "" || controlMethod == "voice") {
                        controlMethod = "voice";
                        switch (direction) {
                            case 'vorwärts':
                                frontArray[0].style.top = -stickSize / 2;
                                frontArray[1].style.top = -stickSize / 2;
                                xy = [-stickSize / 2, -stickSize / 2];
                                setXY();

                                setTimeout(resetMovement, 500);

                                break;

                            case 'rückwärts':
                                frontArray[0].style.top = stickSize / 2;
                                frontArray[1].style.top = stickSize / 2;
                                xy = [stickSize / 2, stickSize / 2];
                                setXY();

                                setTimeout(resetMovement, 500);
                                break;

                            case 'nach links':
                                frontArray[1].style.top = -stickSize / 2;
                                xy = [0, -stickSize / 2];
                                setXY();

                                setTimeout(resetMovement, 500);
                                break;

                            case 'nach rechts':
                                frontArray[0].style.top = -stickSize / 2;
                                xy = [-stickSize / 2, 0];
                                setXY();

                                setTimeout(resetMovement, 500);
                                break;
                        }
                        controlMethod = "";
                        annyang.resume();
                    }
                }
            };

            // Add our commands to annyang
            annyang.addCommands(commands);

            // Start listening.
            annyang.start({autoRestart: true});
        }
        */

        /* --------- SOCKET STUFF ------- */

        //set intial slider values
        socket.on('initialize', function(msg) {
            //set joystick
            xy = msg.xy;

            moveStick();
        });

        //lock sliders if user is not in control
        socket.on('controlling', function(msg) {
            console.dir(msg);

            controlling = msg.control;
            afk = msg.afk === true ? true : false;
            //toggleControlElements(controlling);

            //set control info
            if (controlling) {
                controlInfo.textContent = "Du kontrollierst den ArTank! Tob dich aus!";
            } else if (!controlling && afk !== true) {
                //check if waiting time is still correct, if not, change it
                if (waitingTime !== msg.waitingTime && msg.waitingTime != "NaN") {
                    waitingTime = Math.floor(msg.waitingTime / 1000);
                }
            } else if (afk) {
                controlInfo.textContent = "Du hast zu lange keine Eingabe gemacht! Drücke auf den Knopf, um dich wieder zu verbinden.";

                //disconnect from socket
                socket.disconnect();

                //display reconnect button
                $('#reconnect').css("display", "block");

            }
        });

        //thostnameransmit joystick values if user is not controlling
        socket.on('xy', function(msg) {
            if (!controlling) {
                xy = msg.xy;
                moveStick();
            }
        });

        //if client is not controlling, periodically check if control has been given to client
        var controllerCheck = function() {
            if (!controlling && afk === false) {
                //console.log("Checking for Controller change...");
                socket.emit('controllercheck', {});
            }
            setTimeout(
                controllerCheck, checkupTime);
        }

        controllerCheck();

        //set waiting timer
        var waitingTimer = function() {
            if (!controlling && afk === false) {
                controlInfo.textContent = waitingTime + " Sekunden, bis du Led-Meister wirst!";

                if (waitingTime > 0)
                    --waitingTime;
            }
            setTimeout(waitingTimer, 1000);
        }

        waitingTimer();

        //add event listener to reconnect button
        $('#reconnectButton').click(function() {
            //console.log("Reconnecting...");
            //connect to server
            socket.connect({
                "forceNew": true
            });

            //join server as user
            socket.emit('role', {
                role: "user"
            });

            afk = false;

            //hide reconnect button
            $('#reconnect').css("display", "none");
        });
    </script>
</body>

</html>
